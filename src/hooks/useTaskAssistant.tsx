import {useMemo} from "react";

export default function useTaskAssistant (tasks) {
    return useMemo(() => {
        if (!tasks.length) return "–î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–º–æ—á—å  üòâ ";

        const now = new Date();
        const overdue = tasks.filter(t => new Date(t.dueDate) < now && !t.completed);
        const highPriority = tasks.filter(t => t.priority === "hight" && !t.completed);
        const soonDeadline = tasks
            .filter(t => !t.completed)
            .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))[0];

        const completedCount = tasks.filter(t => t.completed).length;
        const completionRate = Math.round((completedCount / tasks.length) * 100);
        const overloadDays = Object.values(
            tasks.reduce((acc, t) => {
                const date = new Date(t.dueDate).toDateString();
                acc[date] = (acc[date] || 0) + 1;
                return acc;
            }, {})
        ).filter(count => count > 3).length;

        const recommendations = [];

        if (overdue.length) {
            recommendations.push(`‚ö†Ô∏è –£ –≤–∞—Å ${overdue.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –ù–∞—á–Ω–∏—Ç–µ —Å "${overdue[0].title}".`);
        }
        if (highPriority.length) {
            recommendations.push(`üî• –°–æ–≤–µ—Ç: –≤–æ–∑—å–º–∏—Ç–µ—Å—å –∑–∞ –∑–∞–¥–∞—á—É —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ${highPriority[0].title}`)
        }
        if (soonDeadline) {
            recommendations.push(`‚è≥ –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–¥–µ–ª–∞—Ç—å "${soonDeadline.title}", —Å—Ä–æ–∫ ‚Äî ${soonDeadline.dueDate}.`);
        }


        if (overloadDays > 0 ) {
            recommendations.push(`üõë –í ${overloadDays} –¥–Ω. —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞—á.–ü–æ–¥—É–º–∞–π—Ç–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ —á–∞—Å—Ç–∏`)
        }

        if (!overdue.length && completionRate > 80) {
            recommendations.push("üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–º–ø.");

        }

        return {recommendations, progress: completionRate }

    }, [tasks])
}